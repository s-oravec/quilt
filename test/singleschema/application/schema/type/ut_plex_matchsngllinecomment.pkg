CREATE OR REPLACE PACKAGE ut_plex_matchSnglLineComment AS

    Description CONSTANT pete_types.typ_description := 'plex_matchSingleLineComment';

    PROCEDURE matchToTheEOL(D VARCHAR2 := 'matches until the end of line');
    PROCEDURE matchAsOne(D VARCHAR2 := 'does not match again within other single line comment');
    PROCEDURE notMatchWithinMultilineComment(D VARCHAR2 := 'does not match within multiline comment');
    PROCEDURE notMatchWithinTextLiteral(D VARCHAR2 := 'does not match within text literal');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchSnglLineComment AS

    ----------------------------------------------------------------------------
    PROCEDURE matchToTheEOL(D VARCHAR2) IS
        l_Text            VARCHAR2(30) := '-- single line comment';
        l_sourceLines     plex_lexer.typ_source_text := plex_lexer.typ_source_text(l_Text || chr(10));
        l_match           plex_matchSinglelineComment := plex_matchSinglelineComment();
        l_matchWhiteSpace plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchedToken    plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_SinglelineComment, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        -- match chr(10) at the end of line
        l_matchedToken := l_matchWhiteSpace.isMatch;
        pete_assert.eq(plex_lexer.tk_WhiteSpace, l_matchedToken.tokenType);
        -- EOF is what has left
        pete_assert.this(plex_lexer.eof);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE matchAsOne(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := '-- single --line comment';
        l_sourceLines  plex_lexer.typ_source_text := plex_lexer.typ_source_text(l_Text);
        l_match        plex_matchSinglelineComment := plex_matchSinglelineComment();
        l_matchedToken plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_SinglelineComment, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        -- EOF is what has left
        pete_assert.this(plex_lexer.eof);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE notMatchWithinMultilineComment(D VARCHAR2) IS
        l_Text           VARCHAR2(30) := '/*' || chr(10) || '-- tradaa' || chr(10) || '*/';
        l_sourceLines    plex_lexer.typ_source_text := plex_lexer.typ_source_text('/*' || chr(10), '-- tradaa' || chr(10), '*/');
        l_match          plex_matchSinglelineComment := plex_matchSinglelineComment();
        l_matchMultiline plex_matchMultilineComment := plex_matchMultilineComment();
        l_matchedToken   plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        -- try to match single line comment
        l_matchedToken := l_match.isMatch;
        pete_assert.this(l_matchedToken IS NULL);
        -- confirm that it is matched as multiline comment
        l_matchedToken := l_matchMultiline.isMatch;
        pete_assert.eq(plex_lexer.tk_MultilineComment, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        pete_assert.this(plex_lexer.eof);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE notMatchWithinTextLiteral(D VARCHAR2) IS
        l_Text             VARCHAR2(255) := q'['some string with single line comment inside -- comment']';
        l_sourceLines      plex_lexer.typ_source_text := plex_lexer.typ_source_text(l_Text);
        l_match            plex_matchSinglelineComment := plex_matchSinglelineComment();
        l_matchTextLiteral plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken     plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        l_matchedToken := l_match.isMatch;
        pete_assert.this(l_matchedToken IS NULL);
        l_matchedToken := l_matchTextLiteral.isMatch;
        pete_assert.eq(plex_lexer.tk_TextLiteral, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        -- EOF is what has left
        pete_assert.this(plex_lexer.eof);
    END;

END;
/
