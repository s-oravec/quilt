CREATE OR REPLACE PACKAGE ut_plex_matchLabel AS

    Description CONSTANT pete_types.typ_description := 'plex_matchLabel';

    PROCEDURE matchLabel(D VARCHAR2 := 'match label');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchLabel AS

    ----------------------------------------------------------------------------
    PROCEDURE matchLabel(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := 'label';
        l_sourceLines  plex_lexer.typ_source_text := plex_lexer.typ_source_text('<<' || l_Text || '>>');
        l_match        plex_matchLabel := plex_matchLabel();
        l_matchedToken plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_Label, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        -- EOF is what has left
        pete_assert.this(plex_lexer.eof);
    END;

END;
/
