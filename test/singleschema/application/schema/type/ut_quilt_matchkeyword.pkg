CREATE OR REPLACE PACKAGE ut_quilt_MatchKeyword AS

    Description CONSTANT pete_types.typ_description := 'quilt_MatchKeyword';

    PROCEDURE keywordPrefixNotIngored(D VARCHAR2 := 'if keyword matched even as substring if allowedAsSubstring (default)');
    PROCEDURE keywordPrefixIngored(D VARCHAR2 := 'if keyword not matched if not allowedAsSubstring');
    PROCEDURE keywordMatchIfDelimited(D VARCHAR2 := 'keyword is matched if delimited by space, special or eof');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_quilt_MatchKeyword AS

    ----------------------------------------------------------------------------
    PROCEDURE keywordPrefixNotIngored(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := '.Test';
        l_sourceLines  quilt_lexer.typ_source_text := quilt_lexer.typ_source_text(l_Text);
        l_match        quilt_MatchKeyword := quilt_MatchKeyword(quilt_lexer.tk_Dot, quilt_lexer.tk_Dot);
        l_matchWord    quilt_MatchWord := quilt_MatchWord();
        l_matchedToken quilt_token;
    BEGIN
        pete.set_method_description(D);
        quilt_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        -- . is matched even as a prefix
        pete_assert.eq(quilt_lexer.tk_Dot, l_matchedToken.token);
        -- word Test is matched
        l_matchedToken := l_matchWord.isMatch;
        pete_assert.eq(quilt_lexer.tk_Word, l_matchedToken.token);
        pete_assert.eq('Test', l_matchedToken.text);
        pete_assert.this(quilt_lexer.eof);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE keywordPrefixIngored(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := 'functionTest';
        l_sourceLines  quilt_lexer.typ_source_text := quilt_lexer.typ_source_text(l_Text);
        l_match        quilt_MatchKeyword := quilt_MatchKeyword(quilt_lexer.kw_FUNCTION, quilt_lexer.kw_FUNCTION, 'N');
        l_matchWord    quilt_MatchWord := quilt_MatchWord();
        l_matchedToken quilt_token;
    BEGIN
        pete.set_method_description(D);
        quilt_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        -- function keyword is not matched as prefix
        pete_assert.this(l_matchedToken IS NULL);
        -- word functionTest is matched
        l_matchedToken := l_matchWord.isMatch;
        pete_assert.eq(quilt_lexer.tk_Word, l_matchedToken.token);
        pete_assert.eq(l_Text, l_matchedToken.text);
        pete_assert.this(quilt_lexer.eof);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE keywordMatchIfDelimited(D VARCHAR2) IS
        l_Text            VARCHAR2(255) := 'function.funcTion FUNCtion';
        l_sourceLines     quilt_lexer.typ_source_text := quilt_lexer.typ_source_text(l_Text);
        l_match           quilt_MatchKeyword := quilt_MatchKeyword(quilt_lexer.kw_FUNCTION, quilt_lexer.kw_FUNCTION, 'N');
        l_matchDot        quilt_MatchKeyword := quilt_MatchKeyword(quilt_lexer.tk_Dot, quilt_lexer.tk_Dot);
        l_matchWhiteSpace quilt_MatchWhiteSpace := quilt_MatchWhiteSpace();
        l_matchedToken    quilt_token;
    BEGIN
        pete.set_method_description(D);
        quilt_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(quilt_lexer.kw_FUNCTION, l_matchedToken.token);
        pete_assert.eq('function', l_matchedToken.text);
        --
        l_matchedToken := l_matchDot.isMatch;
        pete_assert.eq(quilt_lexer.tk_Dot, l_matchedToken.token);
        pete_assert.eq('.', l_matchedToken.text);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(quilt_lexer.kw_FUNCTION, l_matchedToken.token);
        pete_assert.eq('funcTion', l_matchedToken.text);
        --
        l_matchedToken := l_matchWhiteSpace.isMatch;
        pete_assert.eq(quilt_lexer.tk_WhiteSpace, l_matchedToken.token);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(quilt_lexer.kw_FUNCTION, l_matchedToken.token);
        pete_assert.eq('FUNCtion', l_matchedToken.text);
        --
        pete_assert.this(quilt_lexer.eof);
    END;

END;
/
