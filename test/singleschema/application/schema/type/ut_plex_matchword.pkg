CREATE OR REPLACE PACKAGE ut_plex_matchWord AS

    Description CONSTANT pete_types.typ_description := 'plex_matchWord';

    PROCEDURE delimited(D VARCHAR2 := 'matches word delimited by special characters, whitespace or EOF');
    PROCEDURE enquoted(D VARCHAR2 := 'matches word enquoted by "');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchWord AS

    ----------------------------------------------------------------------------
    PROCEDURE delimited(D VARCHAR2) IS
        l_Text            VARCHAR2(255) := 'delimitedBySpecial.delimitedByWhiteSpace delimitedByEOF';
        l_sourceLines     plex_lexer.typ_source_text := plex_lexer.typ_source_text(l_Text);
        l_match           plex_matchWord := plex_matchWord();
        l_matchWhiteSpace plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchDot        plex_matchKeyword := plex_matchKeyword(plex_lexer.tk_Dot, plex_lexer.tk_Dot);
        l_matchedToken    plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_Word, l_matchedToken.tokenType);
        pete_assert.eq('delimitedBySpecial', l_matchedToken.text);
        --
        l_matchedToken := l_matchDot.isMatch;
        pete_assert.eq(plex_lexer.tk_Dot, l_matchedToken.tokenType);
        pete_assert.eq('.', l_matchedToken.text);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_Word, l_matchedToken.tokenType);
        pete_assert.eq('delimitedByWhiteSpace', l_matchedToken.text);
        --
        l_matchedToken := l_matchWhiteSpace.isMatch;
        pete_assert.eq(plex_lexer.tk_WhiteSpace, l_matchedToken.tokenType);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_Word, l_matchedToken.tokenType);
        pete_assert.eq('delimitedByEOF', l_matchedToken.text);
        --
        pete_assert.this(plex_lexer.eof);
    END;
    ----------------------------------------------------------------------------
    PROCEDURE enquoted(D VARCHAR2 := 'matches word enquoted by "') IS
        l_Text         VARCHAR2(255) := q'["w=o%r'd"]';
        l_sourceLines  plex_lexer.typ_source_text := plex_lexer.typ_source_text(l_Text);
        l_match        plex_matchWord := plex_matchWord();
        l_matchedToken plex_token;
    BEGIN
        pete.set_method_description(D);
        plex_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        pete_assert.eq(plex_lexer.tk_Word, l_matchedToken.tokenType);
        pete_assert.eq(l_Text, l_matchedToken.text);
        --
        pete_assert.this(plex_lexer.eof);
    END;

END;
/
