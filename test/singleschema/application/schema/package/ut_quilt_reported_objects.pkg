CREATE OR REPLACE PACKAGE ut_quilt_reported_objects AS

    Description CONSTANT pete_types.typ_description := 'quilt_reported_objects';

    PROCEDURE before_each;

    PROCEDURE enableSchema(D VARCHAR2 := 'enableReport with schema only enables all PLSQL objects in schema');
    PROCEDURE enableObjectExact(D VARCHAR2 := 'enableReport on exact object enables only that object');
    PROCEDURE disableSchema(D VARCHAR2 := 'disableReport with schema only disables all PLSQL objects in schema');
    PROCEDURE disableObjectExact(D VARCHAR2 := 'enableReport on exact object disables only that object');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_quilt_reported_objects AS

    ---------------------------------------------------------------------------- 
    PROCEDURE before_each IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        DELETE FROM quilt_reported_object;
        COMMIT;
    END;

    ----------------------------------------------------------------------------  
    FUNCTION helper_diffCountEnabledAndEx RETURN PLS_INTEGER IS
        l_Result PLS_INTEGER;
    BEGIN
        SELECT Count(*)
          INTO l_Result
          FROM quilt_reported_object eo
          FULL OUTER JOIN (SELECT * FROM user_objects WHERE object_type IN ('PACKAGE BODY', 'TYPE BODY', 'FUNCTION', 'PROCEDURE', 'TRIGGER')) uo ON (uo.object_name =
                                                                                                                                                    eo.object_name)
         WHERE eo.object_name IS NULL
            OR uo.object_name IS NULL;
        --
        RETURN l_Result;
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE enableSchema(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        --test
        quilt_reported_objects.enable_report(USER);
        --assert
        pete_assert.eq(helper_diffCountEnabledAndEx, 0, 'All user PL/SQL objects in schema should be enabled for report');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE enableObjectExact(D VARCHAR2 := 'enableReport on exact object enables only that object') IS
        lrec_enabledObject quilt_reported_object%ROWTYPE;
    BEGIN
        pete.set_method_description(D);
        -- test
        quilt_reported_objects.enable_report(p_owner => USER, p_object_name => $$PLSQL_UNIT);
        --assert
        SELECT * INTO lrec_enabledObject FROM quilt_reported_object eo;
        --  
        pete_assert.eq(USER, lrec_enabledObject.owner);
        pete_assert.eq($$PLSQL_UNIT, lrec_enabledObject.object_name);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE disableSchema(D VARCHAR2) IS
        l_Cnt PLS_INTEGER;
    BEGIN
        pete.set_method_description(D);
        --test
        quilt_reported_objects.enable_report(USER);
        quilt_reported_objects.disable_report(USER);
        --assert
        SELECT Count(*) INTO l_Cnt FROM quilt_reported_object eo;
        pete_assert.eq(l_Cnt, 0, 'All user PL/SQL objects in schema should be disabled for report');
        --test
        quilt_reported_objects.enable_report(USER, $$PLSQL_UNIT);
        quilt_reported_objects.disable_report(USER);
        --assert
        SELECT Count(*) INTO l_Cnt FROM quilt_reported_object eo;
        pete_assert.eq(l_Cnt, 0, 'All user PL/SQL objects in schema should be disabled for report');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE disableObjectExact(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        --test
        quilt_reported_objects.enable_report(USER);
        quilt_reported_objects.disable_report(USER, $$PLSQL_UNIT);
        --assert
        pete_assert.eq(helper_diffCountEnabledAndEx, 1, 'Specific object should be disabled for report');
    END;

END;
/
