CREATE OR REPLACE PACKAGE ut_quilt_reported_objects AS

    Description CONSTANT pete_types.typ_description := 'quilt_reported_objects';

    PROCEDURE before_each;

    PROCEDURE enableSchema(D VARCHAR2 := 'enableReport with schema only enables all PLSQL objects in schema');
    PROCEDURE enableObjectExact(D VARCHAR2 := 'enableReport on exact object enables only that object');
    PROCEDURE disableSchema(D VARCHAR2 := 'disableReport with schema only disables all PLSQL objects in schema');
    PROCEDURE disableObjectExact(D VARCHAR2 := 'enableReport on exact object disables only that object');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_quilt_reported_objects AS

    ---------------------------------------------------------------------------- 
    PROCEDURE before_each IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        DELETE FROM quilt_reported_object;
        COMMIT;
    END;

    ----------------------------------------------------------------------------
    PROCEDURE enableSchema(D VARCHAR2) IS
        l_objects quilt_object_list_type;
        l_enabled PLS_INTEGER;
    BEGIN
        pete.set_method_description(D);
        --test        
        l_objects := quilt_util_cu.getObjectList(USER);
        quilt_reported_objects.enable_report(l_objects);
        SELECT Count(*) INTO l_enabled FROM TABLE(quilt.reported_objects);
        --assert
        pete_assert.eq(l_objects.count, l_enabled, 'All user PL/SQL objects in schema should be enabled for report');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE enableObjectExact(D VARCHAR2 := 'enableReport on exact object enables only that object') IS
        lrec_enabledObject quilt_reported_object%ROWTYPE;
    BEGIN
        pete.set_method_description(D);
        -- test
        quilt_reported_objects.enable_report(quilt_util_cu.getObjectList(USER, $$PLSQL_UNIT));
        --assert
        SELECT * INTO lrec_enabledObject FROM quilt_reported_object eo;
        --  
        pete_assert.eq(USER, lrec_enabledObject.owner);
        pete_assert.eq($$PLSQL_UNIT, lrec_enabledObject.object_name);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE disableSchema(D VARCHAR2) IS
        l_Cnt PLS_INTEGER;
    BEGIN
        pete.set_method_description(D);
        --test
        quilt_reported_objects.enable_report(quilt_util_cu.getObjectList(USER));
        quilt_reported_objects.disable_report(quilt_util_cu.getObjectList(USER));
        --assert
        SELECT Count(*) INTO l_Cnt FROM quilt_reported_object eo;
        pete_assert.eq(l_Cnt, 0, 'All user PL/SQL objects in schema should be disabled for report');
        --test
        quilt_reported_objects.enable_report(quilt_util_cu.getObjectList(USER, $$PLSQL_UNIT));
        quilt_reported_objects.disable_report(quilt_util_cu.getObjectList(USER));
        --assert
        SELECT Count(*) INTO l_Cnt FROM quilt_reported_object eo;
        pete_assert.eq(l_Cnt, 0, 'All user PL/SQL objects in schema should be disabled for report');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE disableObjectExact(D VARCHAR2) IS
        l_enabled_objects  quilt_object_list_type;
        l_disabled_objects quilt_object_list_type;
        l_enabled          PLS_INTEGER;
    BEGIN
        pete.set_method_description(D);
        --test        
        l_enabled_objects  := quilt_util_cu.getObjectList(USER);
        l_disabled_objects := quilt_util_cu.getObjectList(USER, $$PLSQL_UNIT);
        pete_assert.eq(1, l_disabled_objects.count);
        --test
        quilt_reported_objects.enable_report(l_enabled_objects);
        SELECT Count(*) INTO l_enabled FROM TABLE(quilt.reported_objects);
        pete_assert.eq(l_enabled, l_enabled_objects.count);
        quilt_reported_objects.disable_report(l_disabled_objects);
        SELECT Count(*) INTO l_enabled FROM TABLE(quilt.reported_objects);
        pete_assert.eq(l_enabled, l_enabled_objects.count - l_disabled_objects.count, 'Specific object should be disabled for report');
    END;

END;
/
