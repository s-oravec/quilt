CREATE OR REPLACE PACKAGE ut_plex_lexer AS

    Description CONSTANT pete_types.typ_description := 'plex_lexer';

    PROCEDURE initializeWorksWithEmpty(D VARCHAR2 := 'initialize works with empty');
    PROCEDURE initializeWorksWithNonEmpty(D VARCHAR2 := 'initialize works with non empty');

    PROCEDURE currentAndConsumeItemWorks(D VARCHAR2 := 'currentItem and consume works');

    PROCEDURE rlbckWOSnapshotThrows(D VARCHAR2 := 'rollback without takeSnapshot throws');
    PROCEDURE commitWOSnapshotThrows(D VARCHAR2 := 'commit without takeSnapshot throws');
    PROCEDURE commitAfterSnapWorks(D VARCHAR2 := 'commit after takeSnapshot works');
    PROCEDURE rollbackAfterSnapWorks(D VARCHAR2 := 'rollback after takeSnapshot works');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_lexer AS

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithEmpty(D VARCHAR2) IS
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text();
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        pete_assert.is_null(plex_lexer.currentItem);
        pete_assert.eq(1, plex_lexer.getIndex);
        pete_assert.this(plex_lexer.eof);
        pete_assert.is_null(plex_lexer.peek(1));
    END;

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithNonEmpty(D VARCHAR2) IS
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo' || chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        pete_assert.eq('f', plex_lexer.currentItem);
        pete_assert.this(NOT plex_lexer.eof);
        pete_assert.eq('o', plex_lexer.peek(1));
        pete_assert.eq('o', plex_lexer.peek(2));
        pete_assert.eq(chr(10), plex_lexer.peek(3));
        pete_assert.eq('b', plex_lexer.peek(4));
        pete_assert.eq('a', plex_lexer.peek(5));
        pete_assert.eq('r', plex_lexer.peek(6));
        pete_assert.eq(chr(10), plex_lexer.peek(7));
        pete_assert.eq('b', plex_lexer.peek(8));
        pete_assert.eq('a', plex_lexer.peek(9));
        pete_assert.eq('z', plex_lexer.peek(10));
        pete_assert.eq(chr(10), plex_lexer.peek(11));
        pete_assert.is_null(plex_lexer.peek(12));
    END;

    ----------------------------------------------------------------------------
    PROCEDURE currentAndConsumeItemWorks(D VARCHAR2) IS
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        pete_assert.eq('f', plex_lexer.currentItem);
        pete_assert.eq(1, plex_lexer.getIndex);
        plex_lexer.consume;
        pete_assert.eq(2, plex_lexer.getIndex);
        pete_assert.eq('o', plex_lexer.currentItem);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rlbckWOSnapshotThrows(D VARCHAR2) IS
        l_thrown      BOOLEAN := FALSE;
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        BEGIN
            plex_lexer.rollbackSnapshot;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown := TRUE;
        END;
        --
        pete_assert.this(l_thrown, 'plex_lexer.rollbackSnapshot should have thrown.');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitWOSnapshotThrows(D VARCHAR2) IS
        l_thrown      BOOLEAN := FALSE;
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        BEGIN
            plex_lexer.commitSnapshot;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown := TRUE;
        END;
        --
        pete_assert.this(l_thrown, 'plex_lexer.commitSnapshot should have thrown.');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitAfterSnapWorks(D VARCHAR2) IS
        l_thrown      BOOLEAN := FALSE;
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        plex_lexer.takeSnapshot;
        plex_lexer.consume;
        plex_lexer.commitSnapshot;
        -- consecutive rollback throws as stack is empty
        BEGIN
            plex_lexer.rollbackSnapshot;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown := TRUE;
        END;
        --
        pete_assert.this(l_thrown, 'plex_lexer.rollbackSnapshot should have thrown.');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rollbackAfterSnapWorks(D VARCHAR2) IS
        l_thrown      BOOLEAN := FALSE;
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
        l_indexBefore PLS_INTEGER;
    BEGIN
        pete.set_method_description(D);
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        plex_lexer.takeSnapshot;
        l_indexBefore := plex_lexer.getIndex;
        plex_lexer.consume;
        plex_lexer.consume;
        plex_lexer.rollbackSnapshot;
        -- indexe is restored to before take snapshot
        pete_assert.eq(l_indexBefore, plex_lexer.getIndex);
        -- consecutive rollback throws as stack is empty
        BEGIN
            plex_lexer.commitSnapshot;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown := TRUE;
        END;
        --
        pete_assert.this(l_thrown, 'plex_lexer.commitSnapshot should have thrown.');
    END;

END;
/
