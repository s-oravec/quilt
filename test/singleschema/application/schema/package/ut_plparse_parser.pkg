CREATE OR REPLACE PACKAGE ut_plparse_parser AS

    Description CONSTANT pete_types.typ_description := 'plparse_Parser';

    PROCEDURE pkgBodyEmpty(D VARCHAR2 := 'Empty package body works');
    PROCEDURE pkgBodyCursor(D VARCHAR2 := 'Package body with cursor declaration works');
    PROCEDURE pkgBodyProcWOParams(D VARCHAR2 := 'Package body with procedure without works');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plparse_parser AS

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyEmpty(D VARCHAR2) IS
        -- NoFormat Start
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text(
            'package body pkgBodyEmpty as' || chr(10), 
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        pete.set_method_description(D);
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        pete_assert.eq('PackageBody', l_ast.toString);
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyCursor(D VARCHAR2) IS
        -- NoFormat Start
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text(
            'package body pkgBodyCursor as' || chr(10), 
            '  cursor crs is' || chr(10), 
            '    select '';'' as x ' || chr(10), 
            '     from dual;'|| chr(10), 
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        pete.set_method_description(D);
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        pete_assert.eq('PackageBody(BlockDeclPart(OtherDecl))', l_ast.toString);
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyProcWOParams(D VARCHAR2) IS
        -- NoFormat Start
        l_sourceLines plex_lexer.typ_source_text := plex_lexer.typ_source_text(
            'package body pkgBodyCursor as' || chr(10), 
            '  procedure tradaa is' || chr(10),
            '  begin null; end;' || chr(10),
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        pete.set_method_description(D);
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        pete_assert.eq('PackageBody(BlockDeclPart(Procedure(BlockCode(SimpleStatement))))', l_ast.toString);
    END;

END;
/
