CREATE OR REPLACE PACKAGE ut_quilt_util AS

    Description CONSTANT pete_types.typ_description := 'quilt_Util';

    -- TODO: setPLSQLOptimizeLevel with different schema has to be tested from other schema that Quilt DEV schema
    -- TODO: setPLSQLOptimizeLevel with only owner passed into method has to be tested from other schema that Quilt DEV schema as it would try to recompile also this UT package

    PROCEDURE setOptimizeLevel(D VARCHAR2 := 'set PLSQL optimize level works');

    PROCEDURE getOptLvlWorks(D VARCHAR2 := 'get PLSQL optimize level returns objects PLSQL Optimize level');

    PROCEDURE containsWorks(D VARCHAR2 := 'Contains works as expected');

    PROCEDURE getCallerQualifiedName(D VARCHAR2 := 'getCallerQualifiedName works');
    PROCEDURE getCurrentQualifiedName(D VARCHAR2 := 'getCurrenQualifiedName works');

    PROCEDURE fstrNoPlaceholdersInStr(D VARCHAR2 := 'formatString does not change string if there are no placeholders in it');
    PROCEDURE fstrReplacePlaceholders1(D VARCHAR2 := 'formatString replaces all occurences of placeholder');
    PROCEDURE fstrReplacePlaceholders2(D VARCHAR2 := 'formatString replaces all occurences of placeholder');
    PROCEDURE fstrAppendValueIfNoPlacehldr(D VARCHAR2 := 'formatString appends value if no placeholder found');
    PROCEDURE fstr10Placeholders(D VARCHAR2 := 'formatString supports 10 placeholders');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_quilt_util AS

    ----------------------------------------------------------------------------  
    FUNCTION helper_getPLSQLOptimizeLevel
    (
        p_owner       IN VARCHAR2,
        p_objecT_name IN VARCHAR2,
        p_object_type IN VARCHAR2
    ) RETURN BINARY_INTEGER IS
        l_Result BINARY_INTEGER;
    BEGIN
        SELECT plsql_optimize_level
          INTO l_Result
          FROM all_plsql_object_settings t
         WHERE t.owner = p_owner
           AND t.name = p_object_name
           AND (p_object_type IS NULL OR t.type = p_object_type)
           AND t.type IN (quilt_const.OBJ_TYPE_PACKAGE_BODY,
                          quilt_const.OBJ_TYPE_TYPE_BODY,
                          quilt_const.OBJ_TYPE_PROCEDURE,
                          quilt_const.OBJ_TYPE_FUNCTION,
                          quilt_const.OBJ_TYPE_TRIGGER);
        --
        RETURN l_Result;
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE helper_assertCallerEquals(p_callerQN IN VARCHAR2) IS
    BEGIN
        pete_assert.eq(p_callerQN, quilt_util.getCallerQualifiedName);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE fstrNoPlaceholdersInStr(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        pete_assert.eq('foo', quilt_util.formatString('foo'));
    END;

    ----------------------------------------------------------------------------
    PROCEDURE fstrReplacePlaceholders1(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        pete_assert.eq('foo foo', quilt_util.formatString('$1 $1', 'foo'));
    END;

    ----------------------------------------------------------------------------
    PROCEDURE fstrReplacePlaceholders2(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        pete_assert.eq('foo bar foo', quilt_util.formatString('$1 $2 $1', 'foo', 'bar'));
    END;

    ----------------------------------------------------------------------------
    PROCEDURE fstrAppendValueIfNoPlacehldr(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        -- NoFormat Start
           pete_assert.eq('foo bar foo baz',
                          quilt_util.formatString('$1 $2 $1',
                                                  'foo', 'bar','baz'));
           -- NoFormat End
    END;

    ----------------------------------------------------------------------------
    PROCEDURE fstr10Placeholders(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        -- NoFormat Start
           pete_assert.eq('aoo boo coo doo eoo foo goo hoo ioo joo',
                          quilt_util.formatString('$1 $2 $3 $4 $5 $6 $7 $8 $9 $10',
                                                  'aoo','boo','coo','doo','eoo','foo','goo','hoo','ioo','joo'));
           -- NoFormat End
    END;

    ----------------------------------------------------------------------------
    PROCEDURE setOptimizeLevel(D VARCHAR2) IS
        --
        PROCEDURE test_and_assert
        (
            p_object_name all_objects.object_name%Type,
            p_object_type all_objects.object_type%Type
        ) IS
        BEGIN
            quilt_util_cu.setPLSQLOptimizeLevel(quilt_util_cu.getObjectList(USER, p_object_name), quilt_util_cu.PLSQL_OPTIMIZE_LEVEL_1);
            pete_assert.eq(quilt_util_cu.PLSQL_OPTIMIZE_LEVEL_1,
                           quilt_util_cu.getPLSQLOptimizeLevel(USER, p_object_name, p_object_type),
                           'For object ' || p_object_name);
            quilt_util_cu.setPLSQLOptimizeLevel(quilt_util_cu.getObjectList(USER, p_object_name), quilt_util_cu.PLSQL_OPTIMIZE_LEVEL_2);
            pete_assert.eq(quilt_util_cu.PLSQL_OPTIMIZE_LEVEL_2,
                           quilt_util_cu.getPLSQLOptimizeLevel(USER, p_object_name, p_object_type),
                           'For object ' || p_object_name);
        END;
        --
    BEGIN
        pete.set_method_description(D);
        --
        test_and_assert('FIX_UTIL_OPTIMIZELEVEL_F', 'FUNCTION');
        test_and_assert('FIX_UTIL_OPTIMIZELEVEL_P', 'PROCEDURE');
        test_and_assert('FIX_UTIL_OPTIMIZELEVEL_TRG', 'TRIGGER');
        test_and_assert('FIX_UTIL_OPTIMIZELEVEL_PKG', 'PACKAGE BODY');
        -- TODO: TYPE BODY
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE getOptLvlWorks(D VARCHAR2) IS
        --
        PROCEDURE test
        (
            p_object_name all_objects.object_name%Type,
            p_object_type all_objects.object_type%Type
        ) IS
        BEGIN
            pete_assert.eq(helper_getPLSQLOptimizeLevel(USER, p_object_name, p_object_type),
                           quilt_util_cu.getPLSQLOptimizeLevel(USER, p_object_name, p_object_type),
                           'For object ' || p_object_name);
        END;
        --
    BEGIN
        pete.set_method_description(D);
        --
        test('FIX_UTIL_OPTIMIZELEVEL_F', 'FUNCTION');
        test('FIX_UTIL_OPTIMIZELEVEL_P', 'PROCEDURE');
        test('FIX_UTIL_OPTIMIZELEVEL_TRG', 'TRIGGER');
        test('FIX_UTIL_OPTIMIZELEVEL_PKG', 'PACKAGE BODY');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE getCallerQualifiedName(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        helper_assertCallerEquals($$PLSQL_UNIT || '.GETCALLERQUALIFIEDNAME');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE getCurrentQualifiedName(D VARCHAR2) IS
    BEGIN
        pete.set_method_description(D);
        pete_assert.eq($$PLSQL_UNIT || '.GETCURRENTQUALIFIEDNAME', quilt_util.getCurrentQualifiedName);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE containsWorks(D VARCHAR2 := 'Contains works as expected') IS
    BEGIN
        pete.set_method_description(D);
        pete_assert.this(quilt_util.contains('123', '1'));
        pete_assert.this(quilt_util.contains('1%3', '%'));
        pete_assert.this(quilt_util.contains('^%3', '^'));
        pete_assert.this(quilt_util.contains('1%$', '$'));
        pete_assert.this(quilt_util.contains('1''3', ''''));
    END;

END;
/
